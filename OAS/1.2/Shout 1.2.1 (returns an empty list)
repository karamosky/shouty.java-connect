openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/sbc6/Shout/1.2.1
info:
  description: Shout API - method to make a shout (with optional origin)
  version: "1.2.1"
  title: Shout App API - Shout from a location
  contact:
    email: emmanuel.paraskakis@smartbear.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /people/{person}:
    put:
      summary: Set a person's location.
      operationId: setLocation
      description: |
        Sets a person's location
      parameters:
        - in: path
          name: person
          description: person's name
          required: true
          schema:
            type: string
          example: Sean
      responses:
        '200':
          description: location stored
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        description: Submit a person's location
  /shouts/{person}:
    get:
      summary: Retrieves shouts.
      operationId: retrieveShouts
      description: |
        Retrieves a list of shouts
      parameters:
        - in: path
          name: person
          description: person's name
          required: true
          schema:
            type: string
          example: Lucy
      responses:
        '200':
          description: list of Shouts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shout'
              example: []
  /shouts:
    post:
      summary: Creates a shout.
      operationId: createShout
      description: |
        Stores a new shout
      responses:
        '201':
          description: shout created
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shout'
        description: Shout item to add
components:
  schemas:
    Shout:
      type: object
      required:
        - person
        - message
      properties:
        person:
          type: string
          example: Sean
        message:
          type: string
          example: Hello, World
        x:
          type: integer
        y:
          type: integer
    Person:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: integer
        y:
          type: integer